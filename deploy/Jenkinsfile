pipeline {
    agent any

    environment {
        ANSIBLE_CONFIG = "${WORKSPACE}/deploy/ansible.cfg"
    }

    parameters {
        string(name: 'inventory', defaultValue: 'dev', description: 'This is the inventory file for the environment to deploy configuration')
    }

    stages {
        stage("InitialCleanup") {
            steps {
                script {
                    sh 'sudo chown -R jenkins:jenkins ${WORKSPACE}'
                    sh 'sudo chmod -R u+rwx ${WORKSPACE}'
                }
                dir("${WORKSPACE}") {
                    deleteDir()
                }
            }
        }

        stage("Checkout SCM") {
            steps {
                git branch: 'feature/jenkinspipeline-stages', url: 'https://github.com/lourash-hub/ansible-config-repo.git'
            }
        }

        stage("Verify and Prepare ansible for execution") {
            steps {
                script {
                    // Verify ansible.cfg presence
                    sh 'echo "Verifying ansible.cfg presence..."'
                    sh 'ls -l ${WORKSPACE}/deploy'
                    
                    // If ansible.cfg is found, append roles_path
                    sh '''
                        if [ -f "${WORKSPACE}/deploy/ansible.cfg" ]; then
                            sed -i "3 a roles_path=${WORKSPACE}/roles:${WORKSPACE}/static-assignments/roles:/etc/ansible/roles" ${WORKSPACE}/deploy/ansible.cfg
                        else
                            echo "ansible.cfg not found!"
                            exit 1
                        fi
                    '''
                }
            }
        }

        stage("Run ansible playbook") {
            steps {
                script {
                    ansiblePlaybook become: true, colorized: true, credentialsId: 'private-key', disableHostKeyChecking: true, installation: 'ansible', inventory: "inventory/${params.inventory}", playbook: 'playbooks/site.yml'
                }
            }
        }

        stage("FinalCleanup") {
            steps {
                cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenUnstable: true, deleteDirs: true)
            }
        }
    }
}
